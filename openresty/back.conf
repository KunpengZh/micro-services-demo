worker_processes 1;

error_log /dev/stdout info;
pid        /var/run/nginx.pid;

env JWT_SECRET;
env INTERNAL_SECRET;
env EXTERNAL_SECRET;
env API_KEYS;

events {
    worker_connections 1024;
}


http {
    resolver 8.8.8.8;
    include mime.types;
    sendfile on;
    gzip on;
    log_format simple "$request $status $request_time";
    access_log /dev/stdout simple;
    rewrite_log on;

    include confs/*nginx-upstreams.conf;

    lua_package_path '/usr/local/openresty/lua/?.lua;;';
    #lua_code_cache off;
    lua_ssl_verify_depth 10;
    lua_ssl_trusted_certificate '/etc/ssl/certs/ca-certificates.crt';
    init_by_lua_block {
        require('oauth').init({
        code_endpoint = 'https://github.com/login/oauth/authorize',
        token_endpoint = 'https://github.com/login/oauth/access_token',
        profile_endpoint = 'https://api.github.com/user',
        client_id = '224ea4accf9ebc830027',
        client_secret = 'be8db75ec307e5ceb64afe15f1b3841af14a4a1b',
        redirect_uri = 'http://localhost/auth-cb/github/login',
        scope = 'user',
        })
    }
    # upstream springboot202 {
    #     # server docker.for.mac.host.internal:8080;
    #     server springboot202:8080;
    # }
    server {
        listen       80;
        listen 443 ssl http2 default_server;
        server_name  _;
        root   /data/;
        # ssl_certificate /etc/nginx/conf.d/cert.pem;
        # ssl_certificate_key /etc/nginx/conf.d/key.pem;
        # ssl_dhparam /etc/nginx/conf.d/dhparam.pem;

        proxy_read_timeout 300s;

        #resolver 127.0.0.11;
        resolver 8.8.8.8;
        # include confs/*nginx-locations.conf;
        location / {
            #设置nginx变量  
            set $a $1;   
            set $b $host;  
            default_type "text/html";  
            #nginx内容处理  
            content_by_lua_file test_request.lua;  
            #内容体处理完成后调用  
            echo_after_body "ngx.var.b $b"; 
        }

        location /adddd {
            access_by_lua '
                local security = require("nginx-security")
                security.auth()
            ';
            proxy_pass http://springboot202/user/getUser?userId=kpzhang@cn.ibm.com;
        }
        location /access {
            access_by_lua '
                local security = require("nginx-security")
                security.auth()
            ';
            proxy_pass http://springboot202/;
        }
        location /auth/github/login {
            content_by_lua_block {
                return require('oauth').get_code()
            }
        }

        # location /auth-cb/github/login {
        #    access_by_lua '
        #         require("oauth").authorization(ngx.var.arg_code)
        #     ';
        #     proxy_pass http://springboot202/;
        # }
    }
}

# vim: ft=nginx:et:sts=4:sw=4
