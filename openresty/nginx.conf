worker_processes 1;

error_log /dev/stdout info;
pid        /var/run/nginx.pid;

env JWT_SECRET;
env INTERNAL_SECRET;
env EXTERNAL_SECRET;
env API_KEYS;

events {
    worker_connections 1024;
}


http {
    resolver 8.8.8.8;
    include mime.types;
    sendfile on;
    gzip on;
    log_format simple "$request $status $request_time";
    access_log /dev/stdout simple;
    rewrite_log on;

    include confs/*nginx-upstreams.conf;

    lua_package_path '/usr/local/openresty/lua/?.lua;;';
    # lua_code_cache off;
    lua_ssl_verify_depth 10;
    lua_ssl_trusted_certificate '/etc/ssl/certs/ca-certificates.crt';
    init_by_lua_block {
        require('oauth').init({
        code_endpoint = 'https://github.com/login/oauth/authorize',
        token_endpoint = 'https://github.com/login/oauth/access_token',
        profile_endpoint = 'https://api.github.com/user',
        client_id = '224ea4accf9ebc830027',
        client_secret = 'cd57f669a9623f3f25c12da0c0c40addbe9f6d93',
        redirect_uri = 'http://localhost/auth-cb/github/login',
        scope = 'user',
        state='/'
        })
    }

    upstream springboot202 {
         server docker.for.mac.host.internal:8080;
        #server springboot202:8080;
    }

    upstream nodejs {
        server docker.for.mac.host.internal:3000;
    }
   
    server {
      listen       80;
        listen 443 ssl http2 default_server;
        server_name  _;
        root   /data/;
    
        proxy_read_timeout 300s;

        #resolver 127.0.0.11;
        resolver 8.8.8.8;
        # include confs/*nginx-locations.conf;
    
        # location /testcookie {
        #     content_by_lua_file /usr/local/openresty/lua/testcookie.lua;
        # }

        location / {
             access_by_lua '
                local security = require("nginx-security")
                security.auth()
            ';
            # proxy_pass http://localhost/index.html;
        }
        location /nodejs {
             access_by_lua '
                local security = require("nginx-security")
                security.auth()
            ';
             proxy_pass http://nodejs;
        }
        location /springboot202 {
            access_by_lua '
                local security = require("nginx-security")
                security.auth()
            ';
            proxy_pass http://springboot202/;
        }
        
        location /auth/github/login {
            content_by_lua_block {
                local oauth=require('oauth')
                local state=ngx.var.arg_state
                return oauth.get_code(state)
            }
           
        }

        location /auth-cb/github/login {
            content_by_lua_block {
                local code=ngx.var.arg_code
                local state=ngx.var.arg_state
                local oauth=require('oauth')
                oauth.authorization(code,state)
            }
        }
    }
}

# vim: ft=nginx:et:sts=4:sw=4
